{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions) {\n  let sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = _ref2 => {\n  let {\n    firstIndex,\n    lastIndex,\n    buffer,\n    minFirstIndex,\n    maxLastIndex\n  } = _ref2;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\n\nconst areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.unstable_getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerDimensions.width, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(params => {\n    setContainerDimensions({\n      width: params.width,\n      height: params.height\n    });\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext\n    };\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5, _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth > containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: function () {\n      let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: function () {\n      let {\n        style = {}\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        style: _extends({}, style, contentSize)\n      };\n    },\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","ReactDOM","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridDensityRowHeightSelector","gridFocusCellSelector","gridTabIndexCellSelector","gridEditRowsStateSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","jsx","_jsx","binarySearch","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","min","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","areRenderContextsEqual","context1","context2","firstRowIndex","lastRowIndex","firstColumnIndex","lastColumnIndex","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","columnPositions","columnsTotalWidth","rowHeight","cellFocus","cellTabIndex","rowsMeta","editRowsState","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContext","useState","prevRenderContext","scrollPosition","top","left","containerDimensions","setContainerDimensions","width","height","prevTotalWidth","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","unstable_getLastMeasuredRowIndex","allRowsMeasured","Infinity","range","lastMeasuredIndexRelativeToCurrentPage","computeRenderContext","rows","autoHeight","hasRowWithAutoHeight","firstRowToRender","lastRowToRender","rowBuffer","i","row","unstable_rowHasAutoHeight","id","style","transform","scrollLeft","scrollTop","clientWidth","clientHeight","currentPageTotalHeight","handleResize","params","updateRenderZonePosition","nextRenderContext","initialFirstColumnToRender","columnBuffer","firstColumnToRender","visibleRows","state","updateRenderContext","publishEvent","initialRenderContext","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","abs","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","getRows","minFirstColumn","maxLastColumn","availableSpace","rowIndexOffset","position","renderedRows","forEach","push","unstable_calculateColSpan","rowId","columns","lastColumnToRender","renderedColumns","slice","_currentPage$range5","_rootProps$components","model","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","components","Row","selected","containerWidth","isLastVisible","componentsProps","needsHorizontalScrollbar","contentSize","useMemo","max","shouldExtendContent","size","minHeight","useEffect","rootStyle","overflowX","overflowY","getRenderContext","unstable_getRenderContext","getRootProps","_ref","other","onScroll","onWheel","onTouchMove","getContentProps","getRenderZoneProps"],"sources":["/Users/tmln/Desktop/Main-Ecommerce/client/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\n\nconst areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.unstable_getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerDimensions.width, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(params => {\n    setContainerDimensions({\n      width: params.width,\n      height: params.height\n    });\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5, _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth > containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref = {}) => {\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}