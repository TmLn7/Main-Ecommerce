{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod, useGridNativeEventListener } from '../../utils';\n\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\n\nfunction hasNativeSelection(element) {\n  var _window$getSelection;\n\n  if (((_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.toString()) !== '') {\n    return true;\n  }\n\n  if (!element) {\n    return false;\n  }\n\n  if ((element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\n\n\nexport const useGridClipboard = apiRef => {\n  const copySelectedRowsToClipboard = React.useCallback(function () {\n    let includeHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (apiRef.current.getSelectedRows().size === 0) {\n      return;\n    }\n\n    const data = apiRef.current.getDataAsCsv({\n      includeHeaders,\n      delimiter: '\\t'\n    });\n\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(data).catch(() => {\n        writeToClipboardPolyfill(data);\n      });\n    } else {\n      writeToClipboardPolyfill(data);\n    }\n  }, [apiRef]);\n  const handleKeydown = React.useCallback(event => {\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey; // event.key === 'c' is not enough as alt+c can lead to ©, ç, or other characters on macOS.\n    // event.code === 'KeyC' is not enough as event.code assume a QWERTY keyboard layout which would\n    // be wrong with a Dvorak keyboard (as if pressing J).\n\n    if (String.fromCharCode(event.keyCode) !== 'C' || !isModifierKeyPressed) {\n      return;\n    } // Do nothing if there's a native selection\n\n\n    if (hasNativeSelection(event.target)) {\n      return;\n    }\n\n    apiRef.current.unstable_copySelectedRowsToClipboard(event.altKey);\n  }, [apiRef]);\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleKeydown);\n  const clipboardApi = {\n    unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard\n  };\n  useGridApiMethod(apiRef, clipboardApi, 'GridClipboardApi');\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridNativeEventListener","writeToClipboardPolyfill","data","span","document","createElement","style","whiteSpace","userSelect","opacity","textContent","body","appendChild","range","createRange","selectNode","selection","window","getSelection","removeAllRanges","addRange","execCommand","removeChild","hasNativeSelection","element","_window$getSelection","toString","selectionEnd","selectionStart","useGridClipboard","apiRef","copySelectedRowsToClipboard","useCallback","includeHeaders","current","getSelectedRows","size","getDataAsCsv","delimiter","navigator","clipboard","writeText","catch","handleKeydown","event","isModifierKeyPressed","ctrlKey","metaKey","altKey","String","fromCharCode","keyCode","target","unstable_copySelectedRowsToClipboard","rootElementRef","clipboardApi"],"sources":["/Users/tmln/Desktop/Main-Ecommerce/client/node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod, useGridNativeEventListener } from '../../utils';\n\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\n\nfunction hasNativeSelection(element) {\n  var _window$getSelection;\n\n  if (((_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.toString()) !== '') {\n    return true;\n  }\n\n  if (!element) {\n    return false;\n  }\n\n  if ((element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\n\n\nexport const useGridClipboard = apiRef => {\n  const copySelectedRowsToClipboard = React.useCallback((includeHeaders = false) => {\n    if (apiRef.current.getSelectedRows().size === 0) {\n      return;\n    }\n\n    const data = apiRef.current.getDataAsCsv({\n      includeHeaders,\n      delimiter: '\\t'\n    });\n\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(data).catch(() => {\n        writeToClipboardPolyfill(data);\n      });\n    } else {\n      writeToClipboardPolyfill(data);\n    }\n  }, [apiRef]);\n  const handleKeydown = React.useCallback(event => {\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey; // event.key === 'c' is not enough as alt+c can lead to ©, ç, or other characters on macOS.\n    // event.code === 'KeyC' is not enough as event.code assume a QWERTY keyboard layout which would\n    // be wrong with a Dvorak keyboard (as if pressing J).\n\n    if (String.fromCharCode(event.keyCode) !== 'C' || !isModifierKeyPressed) {\n      return;\n    } // Do nothing if there's a native selection\n\n\n    if (hasNativeSelection(event.target)) {\n      return;\n    }\n\n    apiRef.current.unstable_copySelectedRowsToClipboard(event.altKey);\n  }, [apiRef]);\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleKeydown);\n  const clipboardApi = {\n    unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard\n  };\n  useGridApiMethod(apiRef, clipboardApi, 'GridClipboardApi');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}